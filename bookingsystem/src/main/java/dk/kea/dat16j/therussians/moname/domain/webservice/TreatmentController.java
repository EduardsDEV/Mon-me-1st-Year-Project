package dk.kea.dat16j.therussians.moname.domain.webservice;

import dk.kea.dat16j.therussians.moname.domain.entity.Account;
import dk.kea.dat16j.therussians.moname.domain.entity.Privilege;
import dk.kea.dat16j.therussians.moname.domain.entity.Role;
import dk.kea.dat16j.therussians.moname.domain.entity.Treatment;
import dk.kea.dat16j.therussians.moname.domain.repository.AccountRepository;
import dk.kea.dat16j.therussians.moname.domain.repository.RoleRepository;
import dk.kea.dat16j.therussians.moname.domain.repository.TreatmentRepository;
import dk.kea.dat16j.therussians.moname.domain.security.InitialDataLoader;
import dk.kea.dat16j.therussians.moname.domain.security.LoginHandler;
import dk.kea.dat16j.therussians.moname.technicalservices.HtmlFileLoad;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by Chris on 07-May-17.
 */

@Controller    // This means that this class is a Controller
//@RestController @Controller vs @RestController?
@RequestMapping(path = "/treatments") // This means URL's start with /treatments (after Application path)
public class TreatmentController {

    @Autowired // This means to get the bean called treatmentRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    public TreatmentController(TreatmentRepository treatmentRepository, AccountRepository accountRepository, RoleRepository roleRepository) {
        this.treatmentRepository = treatmentRepository;
        this.accountRepository = accountRepository;
    }

    private TreatmentRepository treatmentRepository;
    private AccountRepository accountRepository;

    @RequestMapping(path = "/add") // Map ONLY GET Requests
    @ResponseBody
    public String addNewTreatment(@RequestParam String name,
                                  @RequestParam float price,
                                  @RequestParam long duration,
                                  @RequestParam String description,
                                  @RequestParam String category,
                                  @RequestParam String email,
                                  @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Account ac = LoginHandler.login(accountRepository, email, password);
        if (ac == null) {
            return LoginHandler.INVALID_CREDENTIALS;
        }

        boolean hasPrivilege = LoginHandler.hasPrivilege(ac, InitialDataLoader.CREATE_TREATMENT);
        if (hasPrivilege) {
            try {
                Treatment t = new Treatment();
                t.setName(name);
                t.setDuration(duration);
                t.setPrice(price);
                t.setDescription(description);
                t.setCategory(category);
                t.setIsActive(true);

                treatmentRepository.save(t);
                return "Saved";
            } catch (EmptyResultDataAccessException e) {
                return "Treatment not found";
            }
        } else {
            return "No privilege";
        }
    }

    @ResponseBody
    @RequestMapping(path = "/all", method = RequestMethod.GET)
    public Iterable<Treatment> getAllTreatments() {
        // This returns a JSON with the treatments
        List<Treatment> treatments = new LinkedList<>();
        Iterator<Treatment> it = treatmentRepository.findAll().iterator();
        while (it.hasNext()) {
            Treatment t = it.next();
            if (t.getIsActive()) {
                treatments.add(t);
            }
        }
        return treatments;
    }

    @RequestMapping(path = "/{treatment}/edit")
    @ResponseBody
    public String editTreatment(@PathVariable(name = "treatment") Integer treatment,
                                @RequestParam String treatmentName,
                                @RequestParam int price,
                                @RequestParam long duration,
                                @RequestParam String description,
                                @RequestParam String category,
                                @RequestParam String email,
                                @RequestParam String password) {
        Account ac = LoginHandler.login(accountRepository, email, password);
        if (ac == null) {
            return LoginHandler.INVALID_CREDENTIALS;
        }
        boolean hasPrivilege = LoginHandler.hasPrivilege(ac, InitialDataLoader.EDIT_TREATMENT);
        if (hasPrivilege) {
            Treatment t = treatmentRepository.findOne(treatment);
            if (t == null) {
                return "Error";
            }
            if ((!treatmentName.isEmpty() && !treatmentName.equals(t.getName())) || price != t.getPrice() || duration != t.getDuration()) {
                t.setIsActive(false);
                t.setName(treatmentName + "_" + t.getTreatmentId());
                treatmentRepository.save(t);
                return addNewTreatment(treatmentName, price, duration, description, category, email, password);
            } else {
                t.setDescription(description);
                t.setCategory(category);
                treatmentRepository.save(t);
                return "Treatment edited!";
            }
        }
        return "Error";
    }

    //this method will probably not be used, as it's probably better to just gray out treatment if you don't wanna use it anymore
    @RequestMapping(path = "/{treatment}/delete")
    @ResponseBody
    public String deleteTreatment(@PathVariable(name = "treatment") Integer treatment,
                                  @RequestParam String email,
                                  @RequestParam String password) {
        Account ac = LoginHandler.login(accountRepository, email, password);
        if (ac == null) {
            return LoginHandler.INVALID_CREDENTIALS;
        }
        boolean hasPrivilege = LoginHandler.hasPrivilege(ac, InitialDataLoader.DELETE_TREATMENT);
        if (hasPrivilege) {
            try {
                Treatment t = treatmentRepository.findOne(treatment);
                t.setIsActive(false);
                t.setName(t.getName() + "_" + t.getTreatmentId());
                treatmentRepository.save(t);
                return "Treatment deleted!";
            } catch (EmptyResultDataAccessException e) {
                return "Treatment not found";
            }
        } else {
            return "No privilege";
        }
    }

    @RequestMapping(method = RequestMethod.GET)
    public void getFile(
            HttpServletResponse response) throws IOException {
        String src = "src/main/resources/templates/treatments.html";
        HtmlFileLoad.loadPage(response, src);
    }

    @ResponseBody
    @RequestMapping(path = "/{category}/all", method = RequestMethod.GET)
    public Iterable<Treatment> getTreatmentsByCategory(@PathVariable(name = "category") String category) {
        List<Treatment> temp = new ArrayList<>();
        Iterator<Treatment> it = treatmentRepository.findAll().iterator();
        while (it.hasNext()) {
            Treatment treatment = it.next();
            if (treatment.getIsActive() && treatment.getCategory().equals(category)) {
                temp.add(treatment);
            }
        }
        return temp;
    }
}
